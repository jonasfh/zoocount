/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dogp.zoocount;

import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.Timer;
import javax.swing.filechooser.FileFilter;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author jonas
 */
public class MainFrame extends javax.swing.JFrame
    implements KeyListener, MouseListener, MouseMotionListener, Smudgifier
{

    /**
     * Set file to save data to
     *
     * @param file the file to set
     */
    public void setFile(String file) {
        this.file = file;
        if (file != null) {
            Settings.getInstance().setOption(
                "cwd",
                new File(file).getParentFile().getAbsolutePath()
            );
        }
    }

    private final HashMap<String, CountPanel> data = new HashMap();
    private String file = null;
    private CountPanel move;
    private boolean isDirty = false;

    /**
     * Creates new form MainFrame
     */
    private MainFrame() {
        initComponents();
        moreComponents();
        initSettings();
    }
    private void moreComponents(){
        jPanel2.setLayout(new GridLayout(7, 9, 3, 3));
        createCountPanels();
        this.addKeyListener(this);
        jPanel1.addKeyListener(this);
        jPanel2.addKeyListener(this);
        jPanel2.addMouseMotionListener(this);
        jPanel2.addMouseListener(this);
        countHistory.addKeyListener(this);
    }
    private void createCountPanels() {
        // Numbers 0-9
        for (int i=0; i<10; i++) {
            addPanel(Integer.toString(i));
        }
        // Capital letters A-Z
        for (int i=65; i<91; i++) {
            addPanel(Character.toString((char)i));
        }
        // Lowercase letters a-z
        for (int i=97; i<123; i++) {
            addPanel(Character.toString((char)i));
        }
        // ...and the spacebar
        addPanel("_");
    }

    private void addPanel(String key, String v, String name, String shortName) {
        CountPanel value;
        if ("_".equals(key)) {
            key = "_";
        }
        if (data.get(key) != null) {
            return;
        }
        value = new CountPanel(key, v);
        value.setCharName(name);
        value.setCharShortName(shortName);
        value.addKeyListener(this);
        value.addSmudgifier(this);
        value.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        data.put(key, value);
        jPanel2.add(value);
    }
    private void addPanel(String key) {
        addPanel(key, "0", "", "");
    }

    private static MainFrame main;

    public static synchronized MainFrame getInstance() {
        if (main == null)
            main=new MainFrame();
        return main;
    }

    /**
     * Display a message in the messages panel. The message is visible for 5
     * seconds before it is cleared.
     *
     * @param message
     */
    public void setMessage(String message) {
        statusLabel.setText(message);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (message.equals(statusLabel.getText())) {
                    statusLabel.setText("");
                }
            }
        });
        timer.setRepeats(false);
        timer.start();
    }

    /**
     *
     */
    public void reveal() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                main.setVisible(true);
            }
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        countHistory = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        currentFileLabel = new javax.swing.JLabel();
        currentFileDisplay = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenu = new javax.swing.JMenuItem();
        saveAsMenu = new javax.swing.JMenuItem();
        loadMenu = new javax.swing.JMenuItem();
        importMenu = new javax.swing.JMenuItem();
        preferencesMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        clearDataMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        fullscreenMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 750));

        jPanel3.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel3.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout(10, 30));

        title.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Start counting");
        jPanel1.add(title, java.awt.BorderLayout.NORTH);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        countHistory.setEditable(false);
        jScrollPane2.setViewportView(countHistory);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.SOUTH);

        jPanel4.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel4.setPreferredSize(new java.awt.Dimension(0, 40));
        jPanel4.setSize(new java.awt.Dimension(0, 40));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        currentFileLabel.setText("Content currently saved to:");
        jPanel5.add(currentFileLabel);
        jPanel5.add(currentFileDisplay);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);
        jPanel4.add(statusLabel, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel1, java.awt.BorderLayout.NORTH);

        jMenu1.setText("File");

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenu);

        saveAsMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenu.setText("Save as...");
        saveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuActionPerformed(evt);
            }
        });
        jMenu1.add(saveAsMenu);

        loadMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadMenu.setText("Open");
        loadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuActionPerformed(evt);
            }
        });
        jMenu1.add(loadMenu);

        importMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importMenu.setText("Import setup from file");
        importMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuActionPerformed(evt);
            }
        });
        jMenu1.add(importMenu);

        preferencesMenu.setText("Preferences...");
        preferencesMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferencesMenuActionPerformed(evt);
            }
        });
        jMenu1.add(preferencesMenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        clearDataMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        clearDataMenu.setText("Clear data...");
        clearDataMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDataMenuActionPerformed(evt);
            }
        });
        jMenu2.add(clearDataMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        fullscreenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        fullscreenMenu.setText("Fullscreen");
        fullscreenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullscreenMenuActionPerformed(evt);
            }
        });
        jMenu3.add(fullscreenMenu);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void preferencesMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMenuActionPerformed
        JTextArea text = new JTextArea();
        text.setText(Settings.getInstance().toString());
        JComponent[] input = new JComponent[] {
            new JLabel("Preferences"),
            text,
        };
        int result = JOptionPane.showConfirmDialog(this, input);
        if (result == JOptionPane.OK_OPTION) {
            Settings.getInstance().importPreferences(text.getText());
            setMessage("Preferences saved successfully!");
        }

    }//GEN-LAST:event_preferencesMenuActionPerformed

    private void loadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuActionPerformed
        if (!clearData(true, false)) {
            return;
        }
        if (openXLSX()) {
            setMessage("File opened successfully!");
            currentFileDisplay.setText(file);
        }
    }//GEN-LAST:event_loadMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        if (save(false)) {
            setMessage("File successfully saved!");
            currentFileDisplay.setText(file);
        }
    }//GEN-LAST:event_saveMenuActionPerformed

    private void fullscreenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullscreenMenuActionPerformed
        toggleFullscreen(JFrame.MAXIMIZED_BOTH == this.getExtendedState());
    }//GEN-LAST:event_fullscreenMenuActionPerformed

    private void saveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuActionPerformed
        if (save(true)) {
            setMessage("File successfully saved!");
            currentFileDisplay.setText(file);
        }
    }//GEN-LAST:event_saveAsMenuActionPerformed

    private void clearDataMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDataMenuActionPerformed
        if (clearData(false, false)) {
            setMessage("Data cleared successfully");
        }
    }//GEN-LAST:event_clearDataMenuActionPerformed

    private void importMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuActionPerformed
        if (!clearData(true, false)) {
            return;
        }
        if (openXLSX()) {
            setMessage("File imported successfully!");
            currentFileDisplay.setText("");
        }
        clearData(true, true);
        setFile(null);
    }//GEN-LAST:event_importMenuActionPerformed

    /**
     * Save the current data to file. If a file is not currently set, then a
     * file dialogue will open, allowing to select an output file. If not set,
     * a file prefix of .xlsx will be appended to the file name.
     *
     * The setting general.saveAllValues will determine if all values are saved,
     * or only characters that have been changed.
     *
     * @param saveAs will always open a file dialogue if set to true
     * @return
     */
    private boolean save(boolean saveAs) {
        try {
            if (this.file == null || saveAs) {
                JFileChooser fc = getFileChooser();
                fc.setAcceptAllFileFilterUsed(false);
                fc.setFileFilter(new FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        return f.getName().endsWith(".xlsx") || f.isDirectory();
                    }

                    @Override
                    public String getDescription() {
                        return "Excel spreadsheet files (.xlsx)";
                    }
                });
                int i = fc.showSaveDialog(main);
                if (i == JFileChooser.CANCEL_OPTION) {
                    return false;
                }
                else {
                    this.setFile(fc.getSelectedFile().getAbsolutePath());
                    if (!this.file.endsWith(".xlsx")) {
                        this.setFile(this.file + ".xlsx");
                    }
                }
            }
            Workbook wb = new HSSFWorkbook();
            Sheet s = wb.createSheet("Data");

            List<CountPanel> list = new ArrayList<>(data.values());
            Collections.sort(list);
            boolean all = Boolean.parseBoolean(
                Settings.getInstance().getOption("general.saveAllValues")
            );
            int row = 0;
            Row r = s.createRow(row++);
            r.createCell(0).setCellValue("Name");
            r.createCell(1).setCellValue("Short name");
            r.createCell(2).setCellValue("Character");
            r.createCell(3).setCellValue("Count");

            for (int i=0; i<list.size(); i++) {
                CountPanel p = list.get(i);
                if (!all && "0".equals(p.getValue())) {
                    continue;
                }
                r = s.createRow(row++);
                r.createCell(0).setCellValue(p.getCharName());
                r.createCell(1).setCellValue(p.getCharShortName());
                r.createCell(2).setCellValue(p.getChar());
                r.createCell(3).setCellValue(p.getValue());
            }
            OutputStream out = new FileOutputStream(file);
            wb.write(out);
            out.close();
            smudge(false);
            return true;
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (EncryptedDocumentException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    /**
     * Make application fill the whole screen.
     * @param isFullscreen if true app is already in full screen mode, reset
     * to normal mode
     */
    public void toggleFullscreen(boolean isFullscreen) {
        if (isFullscreen) {
            this.setExtendedState(JFrame.NORMAL);
        }
        else {
            this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearDataMenu;
    private javax.swing.JTextPane countHistory;
    private javax.swing.JLabel currentFileDisplay;
    private javax.swing.JLabel currentFileLabel;
    private javax.swing.JMenuItem fullscreenMenu;
    private javax.swing.JMenuItem importMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadMenu;
    private javax.swing.JMenuItem preferencesMenu;
    private javax.swing.JMenuItem saveAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    /**
     * keyTyped is called when a key is pressed and released. The function
     * evaluates which key is pressed, and increase the count number for this
     * key.
     *
     * @param e
     */
   @Override
    public void keyTyped(KeyEvent e) {
        e.consume();
        String s = Character.toString(e.getKeyChar());
        if(" ".equals(s)) s = "_";
        CountPanel p = data.get(s);
        if (p == null) return;
        countHistory.setText(countHistory.getText() + s);
        int value;
        try {
            value = Integer.parseInt(p.getValue());
        } catch (Exception ex){
            value = 0;
        }
        p.setValue(Integer.toString(++value));
        smudge(true);
    }

    /**
     * keyPressed is called when a key is pressed down. The function checks if
     * it is the backspace-key that is pressed. If it is,it undoes the last
     * key typed.
     *
     * @param e
     */
    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            String s = countHistory.getText();
            if (s.length() >0) {
                String r = s.substring(s.length()-1, s.length());
                s = s.substring(0, s.length()-1);
                if (s.length() == 0) {
                    smudge(false);
                }
                countHistory.setText(s);
                if("_".equals(r)) r = " ";
                CountPanel p = data.get(r);
                if (p == null) return;
                int value;
                try {
                    value = Integer.parseInt(p.getValue());
                    p.setValue(Integer.toString(--value));
                } catch (Exception ex){
                    p.setValue("0");
                }
            }
        e.consume();
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    /**
     * Initialize settings for the programme. Includes loading the current
     * settings, and setting some options if not set. The options are:
     * csv.separator: defaults to , (comma)
     * csv.quote: defaults to " (double quote)
     * isFullscreen: defaults to false
     */
    private void initSettings() {
        Settings s = Settings.getInstance();
        if ("".equals(s.getOption("csv.separator"))) {
            s.setOption("csv.separator", ",");
        }
        if ("".equals(s.getOption("csv.quote"))) {
            s.setOption("csv.quote", "\"");
        }
        if (Boolean.parseBoolean(s.getOption("isFullscreen", "false"))) {
            toggleFullscreen(false);
        }
        else {
            s.setOption("isFullscreen", "false");
        }
    }

    /**
     * Clear data in the programme. If the data buffer is dirty, then the user
     * is propted asking if he really wants to clear all data. By default only
     * counts are cleared, but the user can also choose to clear names and short
     * names.
     *
     * @param force Clear everyting, unless user cancel operation.
     * @param quiet Don't prompt user for permission to clear data.
     * @return
     */
    private boolean clearData(boolean force, boolean quiet) {
        JCheckBox counts = new JCheckBox("Check this to clear current counts");
        counts.setSelected(true);
        JCheckBox names = new JCheckBox(
            "Check this to clear names and short names"
        );
        names.setSelected(false);
        if (force) {
            names.setSelected(true);
            names.setEnabled(false);
            counts.setEnabled(false);
        }
        int result = JOptionPane.OK_OPTION;
        if (!quiet || isDirty) {
            JComponent[] input = new JComponent[] {
                new JLabel("Clear current counts and names"),
                counts,
                names,
            };
            result = JOptionPane.showConfirmDialog(this, input);
        }
        if (result == JOptionPane.OK_OPTION) {
            List<CountPanel> list = new ArrayList<>(data.values());
            Collections.sort(list);
            for (int i = 0; i<list.size(); i++) {
                if (counts.isSelected()) {
                    list.get(i).clearCounts();
                    countHistory.setText("");
                }
                if (names.isSelected()) {
                    list.get(i).clearNames();
                }
            }
            return true;
        }
        return false;
    }

    /**
     * Open a data file and import counts and names.
     *
     * @return true if the file is opened correctly.
     */
    private boolean openXLSX() {
        JFileChooser fc = getFileChooser();
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.getName().endsWith(".xlsx") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Excel spreadsheet files (.xlsx)";
            }
        });
        int i = fc.showOpenDialog(main);
        if (i == JFileChooser.CANCEL_OPTION) {
            return false;
        }
        else {
            if (readXLSX(fc.getSelectedFile())) {
                this.setFile(fc.getSelectedFile().getAbsolutePath());
            }
        }
        smudge(false);
        return true;
    }

    /**
     * Read the content of an xlsx-file, and update the GUI with the content.
     *
     * @param selectedFile
     * @return
     */
    private boolean readXLSX(File selectedFile) {
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(selectedFile);
            Workbook wb = new HSSFWorkbook(fis);
            Sheet s = wb.getSheet("Data");
            jPanel2.removeAll();
            data.clear();
            for (int i = 1; i <= s.getLastRowNum(); i++) {
                Row r = s.getRow(i);
                String name = r.getCell(0).getStringCellValue();
                String shortName = r.getCell(1).getStringCellValue();
                String charName = r.getCell(2).getStringCellValue();
                String value = r.getCell(3).getStringCellValue();
                if ("".equals(value)) {
                    continue;
                }
                addPanel(charName, value, name, shortName);
            }
            wb.close();
            fis.close();
            createCountPanels();
            this.repaint();
            this.revalidate();
            smudge(false);
            return true;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false;
    }

    private JFileChooser getFileChooser() {
        JFileChooser fc;
         if(this.file != null) {
             fc = new JFileChooser(new File(this.file).getParentFile());
         }
         else if (!"".equals(Settings.getInstance().getOption("cwd", ""))) {
             fc = new JFileChooser(Settings.getInstance().getOption("cwd"));
         }
         else {
             fc = new JFileChooser();
         }
         return fc;
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    /**
     * mousePressed register when mouse button is pressed, and allow to move a
     * panel in the gui interface.
     *
     * @param e
     */
    @Override
    public void mousePressed(MouseEvent e) {
        Component c = jPanel2.getComponentAt(e.getX(), e.getY());
        if (c instanceof CountPanel) {
            this.move = (CountPanel) c;
            ((CountPanel) c).setBorder(BorderFactory.createLineBorder(Color.BLUE, 3));
        }
    }

    /**
     * mouseRelease register when the mouse button is released, and moves a
     * panel if appropriate.
     *
     * @param e
     */
    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.getComponent().equals(jPanel2)) {
            Component c = jPanel2.getComponentAt(e.getX(), e.getY());
            if (c instanceof CountPanel) {
                CountPanel replace = (CountPanel) c;
                if(move != null && !move.equals(replace)) {
                    Component[] comps = jPanel2.getComponents();
                    int moveint = -1;
                    int replaceint = -1;
                    for (int i = 0; i < comps.length; i++) {
                        if (comps[i].equals(move)) {
                            moveint = i;
                        }
                        if (comps[i].equals(replace)) {
                            replaceint = i;
                        }
                    }
                    jPanel2.remove(replace);
                    jPanel2.remove(move);
                    move.setOrdering(replaceint);
                    replace.setOrdering(moveint);
                    if (replaceint > moveint) {
                        jPanel2.add(replace, moveint);
                        jPanel2.add(move, replaceint);
                    }
                    else {
                        jPanel2.add(move, replaceint);
                        jPanel2.add(replace, moveint);
                    }
                    Timer t = new Timer(1000, new ActionListener() {
                        CountPanel p = move;
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            p.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                            replace.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                        }
                    });
                    t.setRepeats(false);
                    t.start();
                    smudge(true);
                    this.revalidate();
                    this.repaint();
                }
            }
            this.move = null;
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    /**
     * mouseDragged gives visual feedback for a drag and drop event when moving
     * the panels in the gui.
     *
     * @param e
     */
    @Override
    public void mouseDragged(MouseEvent e) {
        if (e.getComponent().equals(jPanel2)) {
            Component c = jPanel2.getComponentAt(e.getX(), e.getY());
            if (c instanceof CountPanel) {
                CountPanel replace = (CountPanel) c;
                if(move != null && !move.equals(replace)) {
                    Component[] comps = jPanel2.getComponents();
                    for (int i = 0; i < comps.length; i++) {
                        if (comps[i].equals(replace)) {
                            ((CountPanel)comps[i]).setBorder(BorderFactory.createLineBorder(Color.RED));
                        }
                        else if (!comps[i].equals(move)) {
                            ((CountPanel)comps[i]).setBorder(BorderFactory.createLineBorder(Color.BLACK));
                        }
                    }
                }
            }
        }
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    @Override
    public void smudge(boolean dirty) {
        isDirty = dirty;
    }
}
